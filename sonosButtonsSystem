/*

Copyright 2021 - tomw

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

-------------------------------------------

Change history:

1.1.0 - @tomw - Improved usability by supporting IP for DNI when necessary
1.0.0 - @tomw - Initial release

*/

metadata
{
    definition(name: "Sonos Buttons System", namespace: "tomw", author: "tomw", importUrl: "")
    {
        capability "Refresh"
        
        command "addChildSpeaker", ["speakerName", "speakerIP"]
        command "removeChildSpeaker", ["speakerName"]
    }
}

preferences
{
    section
    {
        input "nodeIP", "text", title: "node-sonos-http-api server IP", required: true
        input "nodeMAC", "text", title: "node-sonos-http-api server MAC (leave blank if on different VLAN than Hubitat)", required: false
        input name: "logEnable", type: "bool", title: "Enable debug logging", defaultValue: false
    }
}

def logDebug(msg) 
{
    if (logEnable)
    {
        log.debug(msg)
    }
}

def updated()
{
    def dni = determineDni()
    
    if(dni)
    {
        device.setDeviceNetworkId(dni)
    }
    
    refresh()
}

def refresh()
{
    def zonesResp = httpGetExec(nodeIP, "zones", 5005)
    refreshChildren(zonesResp)
}

def parse(resp)
{
    logDebug("parseLanMessage(resp) = ${parseLanMessage(resp)}")
    
    def zonesResp = httpGetExec(nodeIP, "zones", 5005)
    
    // refresh all children
    refreshChildren(zonesResp)
}

def refreshChildren(zonesResp)
{
    for(child in getChildDevices())
    {
        child.refreshFromParent(zonesResp)
    }
}

def addChildSpeaker(speakerName, speakerIP)
{
    logDebug("adding ${speakerName} at ${speakerIP}")
    
    def child = getChildDevice(getDNI(speakerName))
    
    if(child)
    {
        logDebug("child ${getDNI(speakerName)} already exists")
        return
    }
    
    child = addChildDevice("Sonos Buttons", getDNI(speakerName), ['isComponent': false, 'name': getDNI(speakerName)])
    if(child)
    {
        child.setupFromParent([sonosName: speakerName, sonosIP: speakerIP, nodeIP: nodeIP])
    }
}

def removeChildSpeaker(speakerName)
{
    deleteChildDevice(getDNI(speakerName))
}

def getDNI(speakerName)
{
    return "${device.displayName}-${speakerName}"
}

def getBaseURI(ipAddr, port = null)
{
    def newURI = "http://" + ipAddr
        
    return newURI + (port ? ":${port}/" : "/")
}

def httpGetExec(ipAddr, suffix, port = null)
{
    logDebug("httpGetExec(${ipAddr}, ${suffix}, ${port})")
    
    try
    {
        getString = getBaseURI(ipAddr, port) + suffix
        def result
        httpGet(getString.replaceAll(' ', '%20'))
        { resp ->
            if (resp.data)
            {
                logDebug("resp.data = ${resp.data}")
                result = resp.data
            }
        }
        
        return result
    }
    catch (Exception e)
    {
        logDebug("httpGetExec() failed: ${e.message}")
    }
}


// various utility functions
        
def determineDni()
{
    if(cleanupMac(nodeMAC))
    {
        return cleanupMac(nodeMAC)
    }
    
    if(convertIPtoHex(nodeMAC))
    {
        // try to use nodeMAC input as IP, just in case the user entered an IP there
        return convertIPtoHex(nodeMAC)
    }
    
    // if we got this far, it means MAC and/or IP are missing from nodeMAC
    // ...so, try to use the other IP input
    
    if(convertIPtoHex(nodeIP))
    {
        return convertIPtoHex(nodeIP)
    }
    
    return null
}
        

def convertIPtoHex(ipAddress)
{
    logDebug("${ipAddress}")
    try
    {
        def split = ipAddress.tokenize('.')
        if(4 == split?.size())
        {
            // we have what looks like an IP address
            return split.collect{ String.format('%02x', it.toInteger()) }?.join()?.toUpperCase()
        }
    }
    catch(e)
    {
        return null
    }
}

def cleanupMac(macAddress)
{
    logDebug("${macAddress}")
    try
    {
        def split = macAddress.tokenize(':')
        
        if(6 == split?.size())
        {
            // we have what looks like a MAC address
            return split.collect{ it }?.join()?.toUpperCase()
        }
        
        if(1 == split?.size())
        {
            // this *might* be a MAC address, so try to verify
            split = split.collect{ it }?.join()?.toUpperCase()
            
            if(split.matches("-?[0-9a-fA-F]+"))
            {
                return split
            }
            
            return null
        }
    }
    catch(e)
    {
        return null
    }
}

